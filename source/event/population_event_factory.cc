//////////////////////////////////////////////////////////////////////////////
// Copyright (C) 1993 - 2003 California Institute of Technology             //
//                                                                          //
// Read the COPYING and README files, or contact 'avida@alife.org',         //
// before continuing.  SOME RESTRICTIONS MAY APPLY TO USE OF THIS FILE.     //
//////////////////////////////////////////////////////////////////////////////

#ifndef POPULATION_EVENT_FACTORY_HH
#include "population_event_factory.hh"
#endif

#ifndef ANALYZE_UTIL_HH
#include "analyze_util.hh"
#endif
#ifndef AVIDA_HH
#include "avida.hh"
#endif
#ifndef AVIDA_DRIVER_BASE_HH
#include "avida_driver_base.hh"
#endif
#ifndef CONFIG_HH
#include "config.hh"
#endif
#ifndef ENVIRONMENT_HH
#include "environment.hh"
#endif
#ifndef EVENT_HH
#include "event.hh"
#endif
#ifndef GENEBANK_HH
#include "genebank.hh"
#endif
#ifndef GENOTYPE_HH
#include "genotype.hh"
#endif
#ifndef INJECT_GENEBANK_HH
#include "inject_genebank.hh"
#endif
#ifndef INJECT_GENOTYPE_HH
#include "inject_genotype.hh"
#endif
#ifndef INST_UTIL_HH
#include "inst_util.hh"
#endif
#ifndef LANDSCAPE_HH
#include "landscape.hh"
#endif
#ifndef LINEAGE_CONTROL_HH
#include "lineage_control.hh"
#endif
#ifndef ORGANISM_HH
#include "organism.hh"
#endif
#ifndef PHENOTYPE_HH
#include "phenotype.hh"
#endif
#ifndef POPULATION_HH
#include "population.hh"
#endif
#ifndef POPULATION_CELL_HH
#include "population_cell.hh"
#endif
#ifndef POPULATION_EVENT_HH
#include "population_event.hh"
#endif
#ifndef RESOURCE_HH
#include "resource.hh"
#endif
#ifndef STATS_HH
#include "stats.hh"
#endif
#ifndef STRING_UTIL_HH
#include "string_util.hh"
#endif
#ifndef TEST_CPU_HH
#include "test_cpu.hh"
#endif
#ifndef TEST_UTIL_HH
#include "test_util.hh"
#endif
#ifndef TOOLS_HH
#include "tools.hh"
#endif

#include <ctype.h>           // for isdigit

using namespace std;



/////////////////
//  events derived from cPopulationEvent (autogenerated code)
/////////////////

// The Process() functions
using namespace std;
#include "cPopulation_process_auto.ci"

// EventNameToEnum()
#include "cPopulation_name2enum_auto.ci"


/////////////////
// cPopulationEventFactory
/////////////////

cPopulationEventFactory::cPopulationEventFactory( cPopulation *pop ) 
  : m_population( pop )
{
}

cPopulationEventFactory::~cPopulationEventFactory()
{
}

//******* construction of events **********//
cEvent *
cPopulationEventFactory::ConstructEvent( int event_enum,
				    const cString & arg_list )
{
  cPopulationEvent *event = NULL;

  switch (event_enum){

#include "cPopulation_construct_event_auto.ci"

    default:
      event = NULL;
      break;
  }

  if( event != NULL ){
    // Have to setup the base class variables
    event->SetFactoryId( GetFactoryId() );

    assert( m_population != NULL );
    event->SetPopulation( m_population );
  }
  return event;
}




