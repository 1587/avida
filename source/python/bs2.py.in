
print("""
# Importing Avida proper (the stuff written in c++)...
""")
import AvidaCore
# Initialize Avida proper (does nothing if Avida has already been
# initialized)...
AvidaCore.cConfig.InitGroupList()

# Show python where to find python modules in the Avida source tree.
import site
site.addsitedir('${CMAKE_CURRENT_SOURCE_DIR}')
del(site)

print("""
# Importing PyQt...
""")
import qt

#print("""
## Importing PyQwt...
#""")
#import qwt

print("""
# Importing iQt...
""")
import iqt

def Reload():
  import AvidaGui2.pyTemporaryReloads
  reload(AvidaGui2.pyTemporaryReloads)
  import linecache
  linecache.checkcache()

def UTs():
  Reload()
  AvidaGui2.pyTemporaryReloads.UTs()

def Run():
  Reload()
  edu_main_controller = AvidaGui2.pyEduMainCtrl.pyEduMainCtrl()
  edu_main_controller.construct()
  edu_main_controller.m_main_mdl.m_main_mdtr.m_main_controller_factory_mdtr.emit(
    qt.PYSIGNAL("newMainControllerSig"), ("pySessionCtrl",
    AvidaCore.cString("genesis.avida"), ))
  return edu_main_controller

print("""
# Importing Avida gui modules...
""")
import AvidaGui2.pyTemporaryReloads
reload(AvidaGui2.pyTemporaryReloads)

print """
Note that I can further decouple the python objects by using controller
creators, who know about the mediator, and can connect their controllers
to the mediator without the controllers' knowledge.

Whether this is a good idea in python has yet to be seen. It's a
decoupling technique I've used in c++, and it may not be needed in
python. Think more about this.
"""

#UTs()
ctrl=Run()
