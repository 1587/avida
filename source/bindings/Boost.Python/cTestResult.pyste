errors_wrapper = Wrapper("errors_wrapper", """
list errors_wrapper(cTestResult *test_result)
{
  list result;
  // call original function
  std::vector<cTestProblem> v = test_result->errors();
  // put all the cTestProblems inside the python list
  std::vector<cTestProblem>::iterator it;
  for (it = v.begin(); it != v.end(); ++it){
      result.append(*it);    
  }
  return result;
}
""")

failures_wrapper = Wrapper("failures_wrapper", """
list failures_wrapper(cTestResult *test_result)
{
  list result;
  // call original function
  std::vector<cTestProblem> v = test_result->failures();
  // put all the cTestProblems inside the python list
  std::vector<cTestProblem>::iterator it;
  for (it = v.begin(); it != v.end(); ++it){
      result.append(*it);    
  }
  return result;
}
""")

cTestResult = Class("cTestResult", "cTestResult.hh")
set_policy(cTestResult.errors, return_value_policy(return_by_value))
set_policy(cTestResult.failures, return_value_policy(return_by_value))
set_wrapper(cTestResult.errors, errors_wrapper)
set_wrapper(cTestResult.failures, failures_wrapper)

# vim: set ft=python:
