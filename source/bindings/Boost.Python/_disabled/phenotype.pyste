
Include("cEnvironment.h")
Include("tBuffer.h")

cPhenotype = Class("cPhenotype", "cPhenotype.h")
set_policy(cPhenotype.GetMerit, return_internal_reference())
#set_policy(cPhenotype.IsInjected, return_internal_reference())
#set_policy(cPhenotype.IsParasite, return_internal_reference())
#set_policy(cPhenotype.IsModifier, return_internal_reference())
#set_policy(cPhenotype.IsModified, return_internal_reference())
#set_policy(cPhenotype.IsFertile, return_internal_reference())
#set_policy(cPhenotype.IsMutated, return_internal_reference())
#set_policy(cPhenotype.ParentTrue, return_internal_reference())
#set_policy(cPhenotype.ParentSex, return_internal_reference())
#set_policy(cPhenotype.ParentCrossNum, return_internal_reference())
#set_policy(cPhenotype.CopyTrue, return_internal_reference())
#set_policy(cPhenotype.DivideSex, return_internal_reference())
#set_policy(cPhenotype.CrossNum, return_internal_reference())
#set_policy(cPhenotype.ChildFertile, return_internal_reference())
#set_policy(cPhenotype.IsMultiThread, return_internal_reference())
exclude(cPhenotype.IsInjected)
exclude(cPhenotype.IsParasite)
exclude(cPhenotype.IsModifier)
exclude(cPhenotype.IsModified)
exclude(cPhenotype.IsFertile)
exclude(cPhenotype.IsMutated)
exclude(cPhenotype.ParentTrue)
exclude(cPhenotype.ParentSex)
exclude(cPhenotype.ParentCrossNum)
exclude(cPhenotype.CopyTrue)
exclude(cPhenotype.DivideSex)
exclude(cPhenotype.MateSelectID)
exclude(cPhenotype.CrossNum)
exclude(cPhenotype.ChildFertile)
exclude(cPhenotype.IsMultiThread)

# vim: set ft=python:
